import requests
import time

from datetime import datetime, timedelta

from cryptor import decrypt_xor
from bot import bot
from dateparser import parse
from database import UsersDBFunc, NewOrdersDBFunc
from traceback import format_exc

from product_parser import get_data

def checker():
	while True:
		try:
			data = UsersDBFunc.get_all_data()
			time.sleep(666) # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 666
			for user in data:
				chat_id = user[0]
				if UsersDBFunc.check_notifications(chat_id) == True:
					status = UsersDBFunc.check_sub(chat_id)
					if status == True:
						key = decrypt_xor(user[2], str(chat_id))
						date = datetime.strftime(datetime.now(), '%Y-%m-%dT00:00:00') 
						
						requests_data = requests.get(
							f'https://suppliers-stats.wildberries.ru/api/v1/supplier/orders?dateFrom={date}&flag=1&key={key}')
						
						date_for_print = datetime.strftime(datetime.now(), '%Y-%m-%d %H:%M') 
						print(f'WB status: {requests_data.status_code} Time {date_for_print}')
						if requests_data.status_code == 200 and len(requests_data.json()) != 0:
							for i in range(len(requests_data.json())):
								print(requests_data.json()[i]['number'])
								if requests_data.json()[i]['number'] != 0:
									order_number = requests_data.json()[i]['number']
									is_num_type_numeric = False

									day = datetime.strptime(datetime.now().strftime('%Y-%m-%d'),'%Y-%m-%d').timestamp()
									if NewOrdersDBFunc.check_order(chat_id, day, order_number, is_num_type_numeric) is True:
										date_order = parse(requests_data.json()[i]['date']).strftime('%d.%m.%Y %H:%M')
										brand = requests_data.json()[i]['brand']
										quality = requests_data.json()[i]['quantity']
										acticle = requests_data.json()[i]['supplierArticle']
										category = requests_data.json()[i]['category']
										try:
											techSize = requests_data.json()[i]['techSize']
										except:
											techSize = False
										name = requests_data.json()[i]['subject']
										barcode = requests_data.json()[i]['barcode']
										price = requests_data.json()[i]['totalPrice']
										discount = requests_data.json()[i]['discountPercent']
										warhouse = requests_data.json()[i]['warehouseName']
										discount_price = round((float(price)-(float(price)/100*float(discount))), 2)
												
										oblast = requests_data.json()[i]['oblast']
										last_change_datet = parse(requests_data.json()[i]['lastChangeDate']).strftime('%d.%m.%Y %H:%M')
										nmId = requests_data.json()[i]['nmId']

										order_num = NewOrdersDBFunc.get_orders_count(chat_id, day) + 1
										all_sum_orders = round(float(NewOrdersDBFunc.get_all_sum_orders(chat_id, day)) + discount_price, 2)
										parce_data = get_data(f'https://www.wildberries.ru/catalog/{nmId}/detail.aspx?targetUrl=SN')
										try:
											msg_text = create_message(order_num, date_order, brand, acticle, category, name, techSize, quality, barcode, oblast, discount_price, warhouse, last_change_datet, nmId, all_sum_orders, parce_data)
											
											bot.send_message(chat_id, msg_text, parse_mode='markdown', disable_web_page_preview=False)
											
										except:
											UsersDBFunc.update_bloked(chat_id, True)
										NewOrdersDBFunc.create(day, chat_id, order_number, discount_price, is_num_type_numeric)
										

									
		except Exception as e:
			print('–û—à–∏–±–∫–∞:\n', format_exc())

def create_message(order_num, date_order, brand, acticle, category, name, techSize, quality, barcode, oblast, discount_price, warhouse, last_change_datet, nmId, all_sum_orders, parce_data):
	try:
		today = datetime.now()
		start = today.replace(day = 1)
		orders = requests.get(f"https://suppliers-stats.wildberries.ru/api/v1/supplier/orders?dateFrom={datetime.datetime.strftime(start, '%Y-%m-%d')}&key=MDVkNzk5OTAtZGIxZC00ODU5LTg1NmQtOTk2N2E5ZTZlZmY3").json()
		sales = requests.get(f"https://suppliers-stats.wildberries.ru/api/v1/supplier/sales?dateFrom={datetime.datetime.strftime(start, '%Y-%m-%d')}&key=MDVkNzk5OTAtZGIxZC00ODU5LTg1NmQtOTk2N2E5ZTZlZmY3").json()
		info = requests.get(f"https://suppliers-stats.wildberries.ru/api/v1/supplier/stocks?dateFrom={datetime.datetime.strftime(start, '%Y-%m-%d')}&key=MDVkNzk5OTAtZGIxZC00ODU5LTg1NmQtOTk2N2E5ZTZlZmY3").json()
		all_orders = len([order for order in orders if not order['isCancel']])
		all_sales = len([sale for sale in sales if sale['saleID'].startswith("S")])
		allToClient = 0
		allFromClient = 0
		allQuantity = 0
		for sale in info:
			allToClient += sale['inWayToClient']
			allFromClient += sale['inWayFromClient']
			allQuantity += sale['quantityFull']
		msg = '–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!'
		msg += f'\nüõí –ó–∞–∫–∞–∑ *‚Ññ{order_num}*'
		msg += f'\nüìÖ –î–∞—Ç–∞: *{date_order}*'
		msg += f'\nüè∑ –ë—Ä–µ–Ω–¥: *{brand}*'
		msg += f'\nüÜî –ê—Ä—Ç–∏–∫—É–ª: *{acticle}*'
		msg += f'\nüóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*'
		msg += f'\nüì¶ –ü—Ä–µ–¥–º–µ—Ç: *{name}*'
		msg += f'\nüî¢ –ö–æ–ª-–≤–æ: *{quality}* —à—Ç.'
		if techSize != False:
			msg += f'\nüìè –†–∞–∑–º–µ—Ä: *{techSize}*'
		msg += f'\n‚ÑπÔ∏è –®—Ç—Ä–∏—Ö-–∫–æ–¥: *{barcode}*'
		msg += f'\nüöö –†–µ–≥–∏–æ–Ω: *{oblast}*'
		msg += f'\nüíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: *{discount_price}* —Ä—É–±.'
		if parce_data != None:
			if 'commission_percentage' in parce_data.keys():
				commission_percentage = parce_data['commission_percentage']
				msg += f'\nüíº –ö–æ–º–∏—Å—Å–∏—è (–±–∞–∑–æ–≤–∞—è): *{commission_percentage}%*'
		msg += f'\nüè™ –°–∫–ª–∞–¥ –æ—Ç–≥—Ä—É–∑–∫–∏: *{warhouse}*'
		msg += f'\nüïò –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: *{last_change_datet}*'
		msg += f'\nüí∞ –°–µ–≥–æ–¥–Ω—è (–≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤): *{order_num}* –Ω–∞ *{all_sum_orders}* —Ä—É–±.'
		msg += f'\nüíé –í—ã–∫—É–ø–æ–≤ –∑–∞ –º–µ—Å—è—Ü: **{int(all_sales / all_orders * 100)}% ({all_sales}/{all_orders})**'
		msg += f'\n‚è© –í –ø—É—Ç–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É: **{allToClient}**'
		msg += f'\n‚è™ –í –ø—É—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: **{allFromClient}**'
		msg += f'\nüï≥ –û—Å—Ç–∞—Ç–æ–∫: **{allQuantity}**'
		""" if parce_data != None:
			if 'commission_percentage' in parce_data.keys():
				commission_percentage = parce_data['commission_percentage']
				msg += f'\nüíº –ö–æ–º–∏—Å—Å–∏—è: *{commission_percentage}%*'

			if 'cost_mono_and_mix_logistics' in parce_data.keys():
				cost_mono_and_mix_logistics = parce_data['cost_mono_and_mix_logistics']
				msg += f'\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –ú–æ–Ω–æ –∏ –ú–∏–∫—Å: *{cost_mono_and_mix_logistics}* —Ä—É–±.'

			if 'cost_storing_mono_and_mixed' in parce_data.keys():
				cost_storing_mono_and_mixed = parce_data['cost_storing_mono_and_mixed']
				msg += f'\nüìù –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ú–æ–Ω–æ –∏ –ú–∏–∫—Å: *{cost_storing_mono_and_mixed}* —Ä—É–±./–¥–µ–Ω—å'
			
			if 'cost_monopallet_logistics' in parce_data.keys():
				cost_monopallet_logistics = parce_data['cost_monopallet_logistics']
				msg += f'\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã: *{cost_monopallet_logistics}* —Ä—É–±.'
			
			if 'storage_cost_monopallets' in parce_data.keys():
				storage_cost_monopallets = parce_data['storage_cost_monopallets']
				msg += f'\nüìù –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã: *{storage_cost_monopallets}* —Ä—É–±./–¥–µ–Ω—å'
			
			if 'calculation_according_actual_dimensions_goods' in parce_data.keys():
				calculation_according_actual_dimensions_goods = parce_data['calculation_according_actual_dimensions_goods']
				msg += f'\n‚öñÔ∏è –†–∞—Å—á–µ—Ç –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –≥–∞–±–∞—Ä–∏—Ç–∞–º —Ç–æ–≤–∞—Ä–∞: *{calculation_according_actual_dimensions_goods}*' """

		msg += f'\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä](https://www.wildberries.ru/catalog/{nmId}/detail.aspx?targetUrl=SN)'

		return msg
	except Exception as e:
		print('–û—à–∏–±–∫–∞:\n', format_exc())

checker()



